/*****************************************************************************
* Model: emitter_receiver_gateway.qm
* File:  ./led.cpp
*
* This code has been generated by QM tool (see state-machine.com/qm).
* DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
*
* This program is open source software: you can redistribute it and/or
* modify it under the terms of the GNU General Public License as published
* by the Free Software Foundation.
*
* This program is distributed in the hope that it will be useful, but
* WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
* or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
* for more details.
*****************************************************************************/
/*${.::led.cpp} ............................................................*/
#include "led.h"


#if ((QP_VERSION < 591) || (QP_VERSION != ((QP_RELEASE^4294967295U) % 0x3E8)))
#error qpn version 5.9.1 or higher required
#endif

/*${AOs::Led} ..............................................................*/
/*${AOs::Led::SM} ..........................................................*/
QState Led_initial(Led * const me) {
    /* ${AOs::Led::SM::initial} */
    return Q_TRAN(&Led_READY);
}
/*${AOs::Led::SM::READY} ...................................................*/
QState Led_READY(Led * const me) {
    QState status_;
    switch (Q_SIG(me)) {
        /* ${AOs::Led::SM::READY} */
        case Q_ENTRY_SIG: {
            Serial.print(F("LED driver activated on pin "));
            Serial.println(me->m_LedPin);
            pinMode(me->m_LedPin, OUTPUT);
            me->m_BlinkCounter = 0;
            status_ = Q_HANDLED();
            break;
        }
        /* ${AOs::Led::SM::READY::initial} */
        case Q_INIT_SIG: {
            status_ = Q_TRAN(&Led_OFF);
            break;
        }
        /* ${AOs::Led::SM::READY::LED_RESET} */
        case LED_RESET_SIG: {
            status_ = Q_TRAN(&Led_READY);
            break;
        }
        default: {
            status_ = Q_SUPER(&QHsm_top);
            break;
        }
    }
    return status_;
}
/*${AOs::Led::SM::READY::OFF} ..............................................*/
QState Led_OFF(Led * const me) {
    QState status_;
    switch (Q_SIG(me)) {
        /* ${AOs::Led::SM::READY::OFF} */
        case Q_ENTRY_SIG: {
            digitalWrite(me->m_LedPin, 0);

            if(me->m_BlinkCounter > 0)
            {
                me->m_BlinkCounter--;
                QActive_armX(&me->super, 0U, BSP_TICKS_PER_SEC/10, 0U);
            }
            status_ = Q_HANDLED();
            break;
        }
        /* ${AOs::Led::SM::READY::OFF} */
        case Q_EXIT_SIG: {
            QActive_disarmX(&me->super, 0U);

            status_ = Q_HANDLED();
            break;
        }
        /* ${AOs::Led::SM::READY::OFF::LED_ON} */
        case LED_ON_SIG: {
            status_ = Q_TRAN(&Led_ON);
            break;
        }
        /* ${AOs::Led::SM::READY::OFF::LED_BLINK} */
        case LED_BLINK_SIG: {
            uint8_t blink = (uint8_t)(Q_PAR(me));

            Serial.print(F("Adding blinks : ")); Serial.println(blink);

            me->m_BlinkCounter += blink*2-1;

            QACTIVE_POST(&me->super, LED_ON_SIG, 0U);
            status_ = Q_HANDLED();
            break;
        }
        /* ${AOs::Led::SM::READY::OFF::Q_TIMEOUT} */
        case Q_TIMEOUT_SIG: {
            status_ = Q_TRAN(&Led_ON);
            break;
        }
        default: {
            status_ = Q_SUPER(&Led_READY);
            break;
        }
    }
    return status_;
}
/*${AOs::Led::SM::READY::ON} ...............................................*/
QState Led_ON(Led * const me) {
    QState status_;
    switch (Q_SIG(me)) {
        /* ${AOs::Led::SM::READY::ON} */
        case Q_ENTRY_SIG: {
            digitalWrite(me->m_LedPin, 1);

            if(me->m_BlinkCounter >= 0)
            {
                if(me->m_BlinkCounter>0)
                {
                    me->m_BlinkCounter--;
                }
                QActive_armX(&me->super, 0U, BSP_TICKS_PER_SEC/10, 0U);
            }
            status_ = Q_HANDLED();
            break;
        }
        /* ${AOs::Led::SM::READY::ON} */
        case Q_EXIT_SIG: {
            QActive_disarmX(&me->super, 0U);

            status_ = Q_HANDLED();
            break;
        }
        /* ${AOs::Led::SM::READY::ON::LED_OFF} */
        case LED_OFF_SIG: {
            status_ = Q_TRAN(&Led_OFF);
            break;
        }
        /* ${AOs::Led::SM::READY::ON::Q_TIMEOUT} */
        case Q_TIMEOUT_SIG: {
            status_ = Q_TRAN(&Led_OFF);
            break;
        }
        default: {
            status_ = Q_SUPER(&Led_READY);
            break;
        }
    }
    return status_;
}

